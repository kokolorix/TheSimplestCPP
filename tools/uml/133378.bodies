class TestCase
!!!138626.cpp!!!	addTestCase(in name : string, in testCase : TestCasePtr) : bool

	return !testCases_.insert(make_pair(name, testCase)).second;
!!!138882.cpp!!!	runTests(in testPattern : string = "*") : TestResult

	stringVector labels = { "Test name","Buildup (ms)","Test result","Test (ms)","Breakdown (ms)", "Total (ms)" };
	VectorOfstringVectors outputs = { labels };

	NameChecker check(testPattern);
	for (CaseMap::value_type& entry :  testCases_)
	{
		const string& name = entry.first;
		TestCasePtr pTest = entry.second;
		if (check(name))
		{

			stringVector values;
			values.reserve(labels.size());
			values.push_back(name);
			try
			{
				auto start = std::chrono::high_resolution_clock::now();
				{
					//					out << "Buildup Test: " << name << std::endl;
					auto start = std::chrono::high_resolution_clock::now();
					pTest->buildUp();
					auto end = std::chrono::high_resolution_clock::now();
					std::chrono::duration<double, std::milli> elapsed = end - start;
					values.push_back(cast<string>(elapsed.count()));
				}
				{
					//				out << "Run Test: " << name << std::endl;
					auto start = std::chrono::high_resolution_clock::now();
					switch (pTest->runTest())
					{
					case TestResult::Successful:
						values.push_back("Succeed");
						//out << "Test " << name << " successfully completed" << std::endl;
						break;
					case TestResult::Failed:
						values.push_back("Failed");
						//out << "Test " << name << " failed" << std::endl;
						break;
					default:
						values.push_back("Error");
						//out << "Test " << name << " failed with unexpected result" << std::endl;
						break;
					}
					auto end = std::chrono::high_resolution_clock::now();
					std::chrono::duration<double, std::milli> elapsed = end - start;
					values.push_back(cast<string>(elapsed.count()));
				}

				{
					//out << "Breakdown Test: " << name << std::endl;
					auto start = std::chrono::high_resolution_clock::now();
					pTest->breakDown();
					auto end = std::chrono::high_resolution_clock::now();
					std::chrono::duration<double, std::milli> elapsed = end - start;
					values.push_back(cast<string>(elapsed.count()));
				}
				auto end = std::chrono::high_resolution_clock::now();
				std::chrono::duration<double, std::milli> elapsed = end - start;
				values.push_back(cast<string>(elapsed.count()));
				outputs.push_back(values);
			}
			catch (std::exception& e)
			{
				out << "Test " << name << " failed: " << e.what() << std::endl;
				return TestResult::Exception;
			}
			catch (...)
			{
				out << "Test " << name << " failed with unexpected exception" << std::endl;
				return TestResult::Unexpected;
			}
		}
	}

	writeOutput(outputs);

	return TestResult::Successful;
